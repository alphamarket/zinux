<?php

namespace iMVC\kernel\caching;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-08 at 07:22:46.
 */
class fileCacheTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var fileCache
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new fileCache(__CLASS__);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers iMVC\kernel\caching\fileCache::store
     * @todo   Implement testsave().
     */
    public function testsave()
    {
        for($index = 0; $index<10; $index++)
        {
            $this->object->save("KEY##$index", "VALUE##$index");
        }
        $this->assertNotNull($this->object);
        $this->assertTrue(file_exists($this->object->getCacheFile()));
        $this->assertCount(10, $this->object->fetchAll());
    }

    /**
     * @covers iMVC\kernel\caching\fileCache::eraseAll
     * @todo   Implement testEraseAll().
     */
    public function testEraseAll()
    {
        $this->assertTrue(file_exists($this->object->getCacheFile()));
        $this->object->eraseAll();
        $this->assertCount(0, $this->object->fetchAll());
        $this->assertFalse(file_exists($this->object->getCacheFile()));
        $this->testsave();
    }

    /**
     * @covers iMVC\kernel\caching\fileCache::getCacheFile
     * @todo   Implement testgetCacheFile().
     */
    public function testgetCacheFile()
    {
        $this->markTestSkipped();
    }

    /**
     * @covers iMVC\kernel\caching\fileCache::setExtension
     * @todo   Implement testSetExtension().
     */
    public function testSetExtension()
    {
        $g = $this->object->getExtension();
        $this->assertEquals($g, ".".pathinfo($this->object->getCacheFile(), PATHINFO_EXTENSION)) ;
        $this->object->setExtension(".foo");
        $this->assertEquals(".foo", $this->object->getExtension());
        $this->assertNotEquals("foo", $this->object->getExtension());
        $this->assertEquals(strlen("foo"), strlen($this->object->getExtension())-1);
        $this->assertEquals("foo", pathinfo($this->object->getCacheFile(), PATHINFO_EXTENSION));
        $this->object->save("FILE_TEST", "TEST");
        $this->assertTrue(file_exists($this->object->getCacheFile()));
        $this->assertTrue($this->object->isCached("FILE_TEST"));
        $this->object->eraseAll();
        $this->assertFalse(file_exists($this->object->getCacheFile()));
        $this->object->setExtension($g);
        $this->assertTrue(file_exists($this->object->getCacheFile()));
    }

    /**
     * @covers iMVC\kernel\caching\fileCache::getExtension
     * @todo   Implement testGetExtension().
     */
    public function testGetExtension()
    {
        $this->testSetExtension();
    }

    /**
     * @covers iMVC\kernel\caching\fileCache::RegisterCacheDir
     * @todo   Implement testRegisterCachePath().
     */
    public function testRegisterCachePath()
    {
        $p = $this->object->getCacheDirectory();
        $this->object->RegisterCachePath(dirname($this->object->getCacheDirectory()));
        $this->assertEquals(strtolower(basename($this->object->getCacheDirectory())),"cache");
        $this->assertFalse(file_exists($this->object->getCacheFile()));
        $this->object->RegisterCachePath($p);
        $this->assertEquals(strtolower(basename($this->object->getCacheDirectory())),"test");
        $this->assertTrue(file_exists($this->object->getCacheFile()));
    }

    /**
     * @covers iMVC\kernel\caching\fileCache::setCachePath
     * @todo   Implement testSetCachePath().
     */
    public function testSetCachePath()
    {
        $p = $this->object->getCacheDirectory();
        $this->object->SetCachePath(dirname($this->object->getCacheDirectory()));
        $this->assertEquals(strtolower(basename($this->object->getCacheDirectory())),"cache");
        $this->assertFalse(file_exists($this->object->getCacheFile()));
        $this->object->SetCachePath($p);
        $this->assertEquals(strtolower(basename($this->object->getCacheDirectory())),"test");
        $this->assertTrue(file_exists($this->object->getCacheFile()));
    }

    /**
     * @covers iMVC\kernel\caching\fileCache::getCacheDirectory
     * @todo   Implement testgetCacheDirectory().
     */
    public function testgetCacheDirectory()
    {
        $this->assertEquals(strtolower(basename($this->object->getCacheDirectory())),"test");
    }

}
